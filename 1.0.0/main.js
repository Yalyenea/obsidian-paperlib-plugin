/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var b=(o,e)=>{for(var t in e)h(o,t,{get:e[t],enumerable:!0})},P=(o,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of y(e))!I.call(o,a)&&a!==t&&h(o,a,{get:()=>e[a],enumerable:!(n=w(e,a))||n.enumerable});return o};var v=o=>P(h({},"__esModule",{value:!0}),o);var x={};b(x,{default:()=>u});module.exports=v(x);var r=require("obsidian"),N={paperNotesFolder:"papers",paperNoteTemplate:`---

title: {{title}}
authors: {{authors}}
year: {{year}}
doi: {{doi}}
---

# {{title}}

## Summary

## Notes

`,protocolHandlerEnabled:!0},u=class extends r.Plugin{async onload(){await this.loadSettings(),this.settings.protocolHandlerEnabled&&(this.registerObsidianProtocolHandler("paperlib",async e=>{console.log("Received PaperLib protocol request:",e);let{id:t,title:n,authors:a,year:p,doi:l}=e;if(!t){new r.Notice("Error: No paper ID provided");return}try{await this.createOrOpenPaperNote(t,n,a,p,l),new r.Notice(`Successfully opened paper: ${n||t}`)}catch(i){console.error("Error handling paperlib protocol:",i),new r.Notice(`Error opening paper: ${i.message||i}`)}}),this.registerObsidianProtocolHandler("paperlib-open",async e=>{if(console.log("Received paperlib-open protocol request:",e),e.path){let t=e.path.replace(/^paperlib\//,"");console.log(`Attempting to open paper from path: ${t}`);try{await this.createOrOpenPaperNote(t,t),new r.Notice(`Successfully opened paper: ${t}`);return}catch(n){console.error("Error handling path parameter:",n),new r.Notice(`Error opening paper: ${n.message||n}`)}}if(e.vault&&e.file){let t=decodeURIComponent(e.file);console.log(`Attempting to open paper from vault/file: ${t}`);try{await this.createOrOpenPaperNote(t,t),new r.Notice(`Successfully opened paper: ${t}`);return}catch(n){console.error("Error handling vault/file parameters:",n),new r.Notice(`Error opening paper: ${n.message||n}`)}}if(e.id||e.title&&e.authors){let{id:t,title:n,authors:a,year:p,doi:l}=e,i=t||n||"unknown";console.log(`Attempting to open paper from metadata: ${i}`);try{await this.createOrOpenPaperNote(i,n,a,p,l),new r.Notice(`Successfully opened paper: ${n||i}`);return}catch(c){console.error("Error handling metadata parameters:",c),new r.Notice(`Error opening paper: ${c.message||c}`)}}new r.Notice("Error: Could not recognize parameters in the URL"),console.error("Unrecognized parameters:",e)})),this.addCommand({id:"create-paper-note",name:"Create new paper note",callback:()=>{new g(this.app,this).open()}}),this.addCommand({id:"open-papers-folder",name:"Open papers folder",callback:async()=>{let e=this.settings.paperNotesFolder,t=this.app.vault.getAbstractFileByPath(e);t&&t instanceof r.TFolder?(this.app.workspace.getLeaf().openFile(t.children[0]),new r.Notice(`Opened papers folder: ${e}`)):new r.Notice(`Papers folder not found: ${e}`)}}),this.addSettingTab(new f(this.app,this))}onunload(){console.log("PaperLib Integration plugin unloaded")}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async ensurePapersFolderExists(){let e=this.settings.paperNotesFolder;if(!e||e.trim()==="")return new r.Notice("Please enter a valid folder path"),!1;try{let t=this.app.vault.getAbstractFileByPath(e);return t?t instanceof r.TFolder?(console.log(`Papers folder already exists: ${e}`),!0):(new r.Notice(`Error: ${e} exists but is not a folder`),!1):(await this.app.vault.createFolder(e),console.log(`Created papers folder: ${e}`),!0)}catch(t){return console.error(`Error creating papers folder: ${t}`),new r.Notice(`Error creating papers folder: ${t}`),!1}}async createOrOpenPaperNote(e,t,n,a,p){let l=this.sanitizeFilename(e),i=t?this.sanitizeFilename(t):l;if(!await this.ensurePapersFolderExists()){new r.Notice("Cannot create paper note: Papers folder does not exist");return}let E=`${this.settings.paperNotesFolder}/${i}.md`,d=this.app.vault.getAbstractFileByPath(E);if(d)new r.Notice(`Opening existing paper note: ${i}`);else{let s=this.settings.paperNoteTemplate;s=s.replace(/{{title}}/g,t||"Untitled Paper"),s=s.replace(/{{authors}}/g,n||""),s=s.replace(/{{year}}/g,a||""),s=s.replace(/{{doi}}/g,p||""),s=s.replace(/{{id}}/g,e);try{d=await this.app.vault.create(E,s),new r.Notice(`Created new paper note: ${i}`)}catch(m){console.error(`Error creating paper note: ${m}`),new r.Notice(`Error creating paper note: ${m}`);return}}d instanceof r.TFile&&await this.app.workspace.getLeaf().openFile(d)}sanitizeFilename(e){return e.replace(/[\\/:*?"<>|]/g,"-")}},g=class extends r.Modal{constructor(e,t){super(e),this.plugin=t}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Create New Paper Note"}),e.createEl("label",{text:"Paper ID (required)"}).appendChild(this.idInput=document.createElement("input")),this.idInput.type="text",this.idInput.value="",this.idInput.placeholder="Unique identifier for the paper",e.createEl("br"),e.createEl("label",{text:"Title"}).appendChild(this.titleInput=document.createElement("input")),this.titleInput.type="text",this.titleInput.value="",this.titleInput.placeholder="Paper title",e.createEl("br"),e.createEl("label",{text:"Authors"}).appendChild(this.authorsInput=document.createElement("input")),this.authorsInput.type="text",this.authorsInput.value="",this.authorsInput.placeholder="Paper authors",e.createEl("br"),e.createEl("label",{text:"Year"}).appendChild(this.yearInput=document.createElement("input")),this.yearInput.type="text",this.yearInput.value="",this.yearInput.placeholder="Publication year",e.createEl("br"),e.createEl("label",{text:"DOI"}).appendChild(this.doiInput=document.createElement("input")),this.doiInput.type="text",this.doiInput.value="",this.doiInput.placeholder="Digital Object Identifier",e.createEl("br"),e.createEl("button",{text:"Create Note"}).addEventListener("click",async()=>{let n=this.idInput.value.trim();if(!n){new r.Notice("Paper ID is required");return}await this.plugin.createOrOpenPaperNote(n,this.titleInput.value.trim(),this.authorsInput.value.trim(),this.yearInput.value.trim(),this.doiInput.value.trim()),this.close()})}onClose(){let{contentEl:e}=this;e.empty()}},f=class extends r.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"PaperLib Integration Settings"}),new r.Setting(e).setName("Papers Folder").setDesc("The folder where paper notes will be stored. Press Enter or click Create to create the folder.").addText(t=>{let n=t.setPlaceholder("Papers").setValue(this.plugin.settings.paperNotesFolder).onChange(async p=>{this.plugin.settings.paperNotesFolder=p,await this.plugin.saveSettings()}),a=n.inputEl;return a.addEventListener("keydown",async p=>{p.key==="Enter"&&(p.preventDefault(),await this.plugin.ensurePapersFolderExists()&&new r.Notice(`Folder created/verified: ${this.plugin.settings.paperNotesFolder}`),a.blur())}),n}).addButton(t=>t.setButtonText("Create").onClick(async()=>{await this.plugin.ensurePapersFolderExists()&&new r.Notice(`Folder created/verified: ${this.plugin.settings.paperNotesFolder}`)})),new r.Setting(e).setName("Note Template").setDesc("Template for new paper notes. Use {{title}}, {{authors}}, {{year}}, {{doi}}, and {{id}} as placeholders.").addTextArea(t=>t.setPlaceholder("Enter your template").setValue(this.plugin.settings.paperNoteTemplate).onChange(async n=>{this.plugin.settings.paperNoteTemplate=n,await this.plugin.saveSettings()})),new r.Setting(e).setName("Enable Protocol Handler").setDesc("Allow opening notes directly from PaperLib using the paperlib:// protocol").addToggle(t=>t.setValue(this.plugin.settings.protocolHandlerEnabled).onChange(async n=>{this.plugin.settings.protocolHandlerEnabled=n,await this.plugin.saveSettings(),new r.Notice("Please restart Obsidian for this change to take effect")}))}};
